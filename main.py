# Form implementation generated from reading ui file 'PyLarm2.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QLabel
from PyQt5.QtGui import QFont
import os
import sys

from PyQt5.QtWidgets import QApplication
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtCore import QUrl
from PyQt5.QtWidgets import QApplication, QPushButton, QWidget, QVBoxLayout
from PyQt5.QtWidgets import QMessageBox



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("PyLarm")
        MainWindow.setFixedSize(400, 600)
        MainWindow.setToolTipDuration(-1)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(50, 50, 50);\n"
                                          "")
        self.centralwidget.setObjectName("centralwidget")
        self.time_hour = QtWidgets.QLabel(parent=self.centralwidget)
        self.time_hour.setGeometry(QtCore.QRect(130, 40, 80, 130))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.time_hour.setFont(font)
        self.time_hour.setStyleSheet("color: rgb(170, 255, 255);")
        self.time_hour.setObjectName("time_hour")
        self.melody = QtWidgets.QPushButton(parent=self.centralwidget)
        self.melody.setEnabled(True)
        self.melody.setGeometry(QtCore.QRect(10, 190, 381, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferDefault)
        self.melody.setFont(font)
        self.melody.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.melody.setMouseTracking(False)
        self.melody.setTabletTracking(False)
        self.melody.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        self.melody.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.DefaultContextMenu)
        self.melody.setAcceptDrops(False)
        self.melody.setAccessibleDescription("")
        self.melody.setAutoFillBackground(False)
        self.melody.setStyleSheet("color: qlineargradient(spread:pad, x1:1, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
                                   "color: rgb(255, 255, 255);\n"
                                  "")
        self.melody.setShortcut("")
        self.melody.setCheckable(False)
        self.melody.setChecked(False)
        self.melody.setAutoRepeat(False)
        self.melody.setAutoExclusive(False)
        self.melody.setAutoRepeatInterval(100)
        self.melody.setAutoDefault(False)
        self.melody.setDefault(False)
        self.melody.setFlat(False)
        self.melody.setObjectName("melody")
        self.repeat = QtWidgets.QPushButton(parent=self.centralwidget)
        self.repeat.setGeometry(QtCore.QRect(10, 250, 381, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.repeat.setFont(font)
        self.repeat.setStyleSheet("color: rgb(255, 255, 255);")
        self.repeat.setObjectName("repeat")
        self.vibration = QtWidgets.QPushButton(parent=self.centralwidget)
        self.vibration.setGeometry(QtCore.QRect(10, 310, 381, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.vibration.setFont(font)
        self.vibration.setStyleSheet("color: rgb(255, 255, 255);")
        self.vibration.setObjectName("vibration")
        self.deleteAfterTrig = QtWidgets.QPushButton(parent=self.centralwidget)
        self.deleteAfterTrig.setGeometry(QtCore.QRect(10, 370, 381, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.deleteAfterTrig.setFont(font)
        self.deleteAfterTrig.setStyleSheet("color: rgb(255, 255, 255);")
        self.deleteAfterTrig.setObjectName("deleteAfterTrig")
        self.description = QtWidgets.QPushButton(parent=self.centralwidget)
        self.description.setGeometry(QtCore.QRect(10, 430, 381, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.description.setFont(font)
        self.description.setStyleSheet("color: rgb(255, 255, 255);")
        self.description.setObjectName("description")
        self.time_minuts = QtWidgets.QLabel(parent=self.centralwidget)
        self.time_minuts.setGeometry(QtCore.QRect(210, 40, 80, 130))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(False)
        font.setWeight(50)
        self.time_minuts.setFont(font)
        self.time_minuts.setStyleSheet("color: rgb(170, 255, 255);")
        self.time_minuts.setObjectName("time_minuts")
        self.label_new_budilnik = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_new_budilnik.setGeometry(QtCore.QRect(140, 10, 111, 16))
        self.label_new_budilnik.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_new_budilnik.setObjectName("label_new_budilnik")
        self.ok = QtWidgets.QPushButton(parent=self.centralwidget)
        self.ok.setGeometry(QtCore.QRect(360, 10, 31, 28))
        self.ok.setStyleSheet("color: rgb(255, 255, 255);")
        self.ok.setObjectName("ok")
        self.ne_ok = QtWidgets.QPushButton(parent=self.centralwidget)
        self.ne_ok.setGeometry(QtCore.QRect(10, 10, 31, 28))
        self.ne_ok.setStyleSheet("color: rgb(255, 255, 255);")
        self.ne_ok.setObjectName("ne_ok")
        self.text1 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.text1.setGeometry(QtCore.QRect(10, 490, 381, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.text1.setFont(font)
        self.text1.setStyleSheet("color: rgb(255, 255, 255);")
        self.text1.setObjectName("text1")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(190, 40, 20, 121))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(170, 255, 255);")
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)

        self.centralwidget2 = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget2.setStyleSheet("background-color: rgb(50, 50, 50);\n"
                                          "")
        self.centralwidget2.setObjectName("centralwidget2")
        self.yes_no = QtWidgets.QLabel(parent=self.centralwidget2)
        self.yes_no.move(200, 300)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.time_hour.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.time_hour.mousePressEvent = self.show_time_hours_picker

        self.time_minuts.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.time_minuts.mousePressEvent = self.show_time_minuts_picker

        self.melody.clicked.connect(self.open_window_melody)

        self.repeat.clicked.connect(self.on_repeat)

        self.file_spisok = []
        self.file_spisok = os.listdir(r"C:\Users\Said8\PycharmProjects\PyLarm_Beta\melody")



        for i in range(len(self.file_spisok)):
            if self.file_spisok[i].endswith(".mp3"):
                continue
            else:
                del self.file_spisok[i]
                self.file_spisok = list(filter(lambda x: x.endswith('.mp3'), os.listdir('melody')))


        self.lastMelody = -1


    def on_repeat(self):
        pass


    def play_melody1(self, event):
        os.chdir(r"C:\Users\Said8\PycharmProjects\PyLarm_Beta\melody")
        melody = QMediaContent(QUrl.fromLocalFile(self.file_spisok[0]))
        self.player.setMedia(melody)
        self.player.play()
        self.lastMelody = 0




    def play_melody2(self, event):
        os.chdir(r"C:\Users\Said8\PycharmProjects\PyLarm_Beta\melody")
        melody = QMediaContent(QUrl.fromLocalFile(self.file_spisok[1]))
        self.player.setMedia(melody)
        self.player.play()
        self.lastMelody = 1


    def play_melody3(self, event):
        os.chdir(r"C:\Users\Said8\PycharmProjects\PyLarm_Beta\melody")
        melody = QMediaContent(QUrl.fromLocalFile(self.file_spisok[2]))
        self.player.setMedia(melody)
        self.player.play()
        self.lastMelody = 2


    def open_window_melody(self, event): # Исправить ошибку когда при закрытии нового окна работает мелодия
        try:
            del self.app
        except:
            pass
        try:
            del self.new_window
        except:
            pass
        self.player = QMediaPlayer()
        self.player.setVolume(50)
        self.app = QApplication([])
        self.new_window = QMainWindow()
        self.new_window.setWindowTitle("Мелодия")
        self.new_window.setFixedSize(500, 750)
        self.new_window.setStyleSheet("background-color: rgb(50, 50, 50);\n"
                                      "")
        self.new_window.setObjectName("centralwidget")

        self.melody_spisok = []
        for i in range(3):
            label = QLabel(f"Мелодия {i + 1}", self.new_window)
            self.melody_spisok.append(label)
            label.move(20, 50 * i)
            label.setFixedSize(200, 70)
            label.setStyleSheet("color: white")
            font = QFont()
            font.setPointSize(16)
            label.setFont(font)

        self.melody_spisok[0].mousePressEvent = self.play_melody1
        self.melody_spisok[1].mousePressEvent = self.play_melody2
        self.melody_spisok[2].mousePressEvent = self.play_melody3

        save_button = QPushButton("+", self.new_window)
        save_button.move(225, 650)
        save_button.setFixedSize(50, 50)
        save_button.clicked.connect(self.save_button_clicked)
        save_button.setStyleSheet("color: white")
        save_button.setFont(font)
        self.player = QMediaPlayer()

        self.new_window.show()



    def save_button_clicked(self):
        self.player.stop()
         # Создать config файл


    def show_time_hours_picker(self, event):
        if int(self.time_hour.text()) > 22:
            self.time_hour.setText("00")
            return
        intText = int(self.time_hour.text())
        if intText < 9:
            self.time_hour.setText("0" + str(intText + 1))
        else:
            self.time_hour.setText(str(intText + 1))

    def show_time_minuts_picker(self, event):
        if int(self.time_minuts.text()) > 54:
            self.time_minuts.setText("00")
            return
        intText = int(self.time_minuts.text())
        if intText < 4:
            self.time_minuts.setText("0" + str(intText + 5))
        else:
            self.time_minuts.setText(str(intText + 5))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Будильник"))
        self.time_hour.setText(_translate("MainWindow", "00"))
        self.yes_no.setText(_translate("MainWindow", "Yes"))
        self.melody.setText(_translate("MainWindow", "Мелодия"))
        self.repeat.setText(_translate("MainWindow", "Повтор"))
        self.vibration.setText(_translate("MainWindow", "Вибрация при сигнале"))
        self.deleteAfterTrig.setText(_translate("MainWindow", "Удалить после срабатывания"))
        self.description.setText(_translate("MainWindow", "Описание"))
        self.time_minuts.setText(_translate("MainWindow", "00"))
        self.label_new_budilnik.setText(_translate("MainWindow", "Новый будильник"))
        self.ok.setText(_translate("MainWindow", "Ок"))
        self.ne_ok.setText(_translate("MainWindow", "НеОК"))
        self.text1.setText(_translate("MainWindow", "Текст при срабатывании мелодии"))
        self.label.setText(_translate("MainWindow", ":"))




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
